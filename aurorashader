uniform shader iChannel0;
uniform shader iChannel1;
uniform float2 iResolution;
uniform float iTime;
uniform float iMouseX;
uniform float iMouseZ;

// Starry-space-like hash
float hash(float2 p) {
    return fract(sin(dot(p, float2(23.43, 45.97))) * 1337.1337);
}

// High-frequency ribbon noise
float ribbon(float2 uv, float time) {
    float wave = sin((uv.x + time * 0.2) * 20.0 + sin(uv.y * 15.0 + time * 0.1) * 2.0);
    return wave * 0.5 + 0.5;
}

// Gradient lighting shimmer
float lightRay(float2 uv, float time) {
    float centerDist = abs(uv.x - 0.5);
    float pulse = sin(time * 2.0 + uv.y * 8.0) * 0.5 + 0.5;
    return smoothstep(0.4, 0.0, centerDist) * pulse;
}

half4 main(float2 fragCoord) {
    float2 uv = fragCoord / iResolution;
    uv = clamp(uv, 0.0, 1.0);

    // Image transition progress
    float progress = clamp(iMouseX / iResolution.x, 0.0, 1.0);

    // Base images
    half4 img0 = iChannel0.eval(uv);
    half4 img1 = iChannel1.eval(uv);
    half4 imageBlend = mix(img0, img1, progress);

    // Aurora lighting (only during transition phase)
    float auraStrength = smoothstep(0.2, 0.5, progress) * smoothstep(0.8, 0.5, progress);

    // Thin aurora ribbons
    float wave = ribbon(uv * float2(3.0, 2.0), iTime);
    float glow = pow(wave, 3.0) * 1.5;

    // Lighting rays from center
    float rays = lightRay(uv, iTime);

    // UV shift for dynamic distortion
    float2 offset = float2(0.0, sin(uv.x * 12.0 + iTime) * 0.015);
    float2 auroraUV = clamp(uv + offset, 0.0, 1.0);

    // Sample lighting color from iChannel1
    half4 auroraColor = iChannel1.eval(auroraUV);
    auroraColor.rgb *= (glow + rays) * auraStrength;

    // Additive aurora layer fades in only mid-transition
    return imageBlend + auroraColor;
}