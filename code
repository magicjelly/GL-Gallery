import androidx.compose.animation.core.AnimationVector2D
import androidx.compose.animation.core.DecayAnimationSpec
import androidx.compose.animation.core.LinearOutSlowInEasing
import androidx.compose.animation.core.TwoWayConverter
import androidx.compose.animation.core.animateDecay
import androidx.compose.animation.core.animateTo
import androidx.compose.animation.core.rememberSplineBasedDecay
import androidx.compose.animation.core.spring
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.size
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.consume
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.input.pointer.VelocityTracker
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.CancellationException
import kotlinx.coroutines.launch
import kotlin.math.absoluteValue
import kotlin.math.max
import kotlin.math.sqrt

// --------------------------------------------------------------------
// TwoWayConverter for Offset, so Animatable can "vectorize" Offset values.
object OffsetVectorConverter : TwoWayConverter<Offset, AnimationVector2D> {
    override fun convertFromVector(vector: AnimationVector2D): Offset =
        Offset(vector.v1, vector.v2)
    override fun convertToVector(value: Offset): AnimationVector2D =
        AnimationVector2D(value.x, value.y)
}

// Extension to compute the magnitude (Euclidean distance) of an Offset.
fun Offset.getDistance(): Float = sqrt(x * x + y * y)

// Extension to normalize an Offset vector.
fun Offset.normalize(): Offset {
    val mag = getDistance()
    return if (mag > 0f) Offset(x / mag, y / mag) else Offset.Zero
}

// --------------------------------------------------------------------
// Custom DecayAnimationSpec for Offset that decays naturally toward a fixed target.
class TargetBasedDecay(
    private val target: Offset,
    // Factor to compute duration (in milliseconds per pixel), adjust as needed.
    private val durationMillisFactor: Float = 2f,
    // Minimum duration in milliseconds.
    private val minDurationMillis: Long = 300L
) : DecayAnimationSpec<Offset> {

    // IMPLEMENT THE REQUIRED vectorConverter PROPERTY.
    override val vectorConverter: TwoWayConverter<Offset, AnimationVector2D>
        get() = OffsetVectorConverter

    // Always return the fixed target.
    override fun getTargetValue(initialValue: Offset, initialVelocity: Offset): Offset = target

    // Compute and return duration in nanoseconds.
    override fun getDurationNanos(initialValue: Offset, initialVelocity: Offset): Long {
        val distance = (target - initialValue).getDistance()
        return max((distance * durationMillisFactor).toLong(), minDurationMillis) * 1_000_000L
    }

    // Compute the current value at a given play time (in nanoseconds) using easing.
    override fun getValueAtNanos(
        initialValue: Offset,
        initialVelocity: Offset,
        playTimeNanos: Long
    ): Offset {
        val durationNanos = getDurationNanos(initialValue, initialVelocity)
        val fraction = playTimeNanos.toFloat() / durationNanos
        val easedFraction = LinearOutSlowInEasing.transform(fraction.coerceIn(0f, 1f))
        return initialValue + (target - initialValue) * easedFraction
    }
}

// Helper function to return a decay spec for Offset.
// If a target is provided (non-null), it returns our custom TargetBasedDecay;
// otherwise, it falls back to the standard splineâ€‘based decay.
@Composable
fun rememberTargetBasedDecay(target: Offset? = null): DecayAnimationSpec<Offset> {
    return if (target == null) {
        rememberSplineBasedDecay()
    } else {
        remember { TargetBasedDecay(target) }
    }
}

// --------------------------------------------------------------------
// Main composable that creates a flickable box.
// It uses a single unified Animatable for Offset so that X and Y animate together.
// When a flick is detected, it first runs a decay animation (using either the custom or default spec)
// and then a spring-back animation returns the box to (0, 0).
@Composable
fun FlickableBoxUnifiedDecayAndSpring(
    // Pass a non-null decayTarget to have the decay phase naturally finish at that position.
    // Pass null to fall back on the default spline-based decay.
    decayTarget: Offset? = Offset(300f, 300f)
) {
    val boxSize = 100.dp
    val density = LocalDensity.current
    val boxPxSize = with(density) { boxSize.toPx() }

    // For potential use (e.g. measuring parent dimensions); not used for clamping in this example.
    val parentSize = remember { mutableStateOf(IntSize.Zero) }

    // A single unified Animatable for the combined Offset, using our OffsetVectorConverter.
    val offset = androidx.compose.animation.core.Animatable(Offset.Zero, OffsetVectorConverter)

    // Get the chosen decay spec.
    val decaySpec = rememberTargetBasedDecay(decayTarget)

    // Define a spring spec for the spring-back phase.
    val springSpec = spring<Offset>(
        dampingRatio = androidx.compose.animation.core.Spring.DampingRatioMediumBouncy,
        stiffness = androidx.compose.animation.core.Spring.StiffnessMedium
    )

    val scope = rememberCoroutineScope()
    var velocityTracker = VelocityTracker()

    // Threshold for detecting a flick (in pixels per second).
    val flickVelocityThreshold = 1000f

    Box(
        modifier = Modifier
            .fillMaxSize()
            .onGloballyPositioned { coordinates ->
                parentSize.value = coordinates.size
            }
            .background(Color.LightGray)
    ) {
        Box(
            modifier = Modifier
                .offset {
                    // Convert our unified Offset to an IntOffset for display.
                    IntOffset(offset.value.x.toInt(), offset.value.y.toInt())
                }
                .pointerInput(Unit) {
                    detectDragGestures(
                        onDragStart = {
                            // Start a new velocity tracker.
                            velocityTracker = VelocityTracker()
                        },
                        onDrag = { change, dragAmount ->
                            change.consume()
                            velocityTracker.addPosition(change.uptimeMillis, change.position)
                            scope.launch {
                                // Update the unified offset directly.
                                offset.snapTo(offset.value + dragAmount)
                            }
                        },
                        onDragEnd = {
                            val velocity = velocityTracker.calculateVelocity()
                            val initialVelocity = Offset(velocity.x, velocity.y)
                            val isFlick =
                                initialVelocity.x.absoluteValue > flickVelocityThreshold ||
                                initialVelocity.y.absoluteValue > flickVelocityThreshold

                            scope.launch {
                                if (isFlick) {
                                    // Run the decay animation on the unified offset using our decaySpec.
                                    offset.animateDecay(initialVelocity, decaySpec)
                                    // Chain the spring-back animation to bring the box back to (0, 0),
                                    // using the current (final) velocity from the decay phase.
                                    offset.animateTo(Offset.Zero, springSpec, initialVelocity = offset.velocity)
                                } else {
                                    // If not a flick, simply spring back immediately.
                                    offset.animateTo(Offset.Zero, springSpec, initialVelocity = Offset.Zero)
                                }
                            }
                        },
                        onDragCancel = { /* Optionally handle drag cancellation here. */ }
                    )
                }
                .size(boxSize)
                .background(Color.Blue)
        )
    }
}