@file:Suppress("FunctionName")

import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.VectorConverter
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.*
import androidx.compose.runtime.withFrameNanos
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.input.pointer.util.VelocityTracker
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.isActive
import kotlinx.coroutines.launch
import kotlin.math.*

/**
 * SpatialController = inertia + soft attractor (critically-damped PD, no bounce)
 * Redirectable mid-flight (reads latest target every frame), interruptible (drag cancels loop).
 *
 * Key Tunables (pixels / seconds units):
 * - attractGain: base positional pull toward target (lower = floatier).
 * - damping: velocity damping vs. the attraction (>= ~2.0 to avoid “springy” feel).
 * - captureRadius: distance where we switch to tighter docking gains.
 * - dockGain / dockDamping: precise final approach behavior.
 * - maxAccel: caps instantaneous acceleration for gentler curves on retarget.
 * - maxSpeed: caps velocity to avoid streaking on long throws.
 * - ambientFriction: constant decel (px/s^2) applied opposite to velocity (space “drag”).
 * - redirectSmoothingHz: how quickly the internal target follows setTarget() (0 = instant).
 * - timeStepClampMs: clamps dt for stability on jank frames.
 */
@Stable
class SpatialController(
    private val scope: CoroutineScope,
    start: Offset = Offset.Zero
) {
    private val _pos = Animatable(start, Offset.VectorConverter)
    val pos: Offset get() = _pos.value

    // --- Tunables ---
    var attractGain = 12f
    var damping = 2.6f
    var captureRadius = 32f
    var dockGain = 22f
    var dockDamping = 3.4f
    var maxAccel = 6000f
    var maxSpeed = 1800f
    var ambientFriction = 0f
    var redirectSmoothingHz = 6f
    var timeStepClampMs = 32f

    // --- Internal ---
    private var vel = Offset.Zero
    private var commandTarget = start
    private var displayTarget = start
    private var running = false

    fun setTarget(newTarget: Offset) {
        commandTarget = newTarget
        if (!running) displayTarget = newTarget
    }

    fun snapTo(newPos: Offset) {
        scope.launch {
            _pos.snapTo(newPos)
            vel = Offset.Zero
        }
    }

    fun addImpulse(v: Offset) { vel += v }
    fun interrupt() { running = false }

    fun start() {
        if (running) return
        running = true
        scope.launch {
            var lastT = 0L
            while (isActive && running) {
                val frameNanos = withFrameNanos { it }
                if (lastT == 0L) { lastT = frameNanos; continue }
                var dt = (frameNanos - lastT) / 1_000_000_000f
                lastT = frameNanos

                // Clamp dt for stability
                val dtClamp = timeStepClampMs / 1000f
                if (dt > dtClamp) dt = dtClamp

                // Redirect smoothing
                val s = if (redirectSmoothingHz <= 0f) 1f else (1f - exp(-redirectSmoothingHz * dt))
                displayTarget += (commandTarget - displayTarget) * s

                // Gains by distance
                val delta = displayTarget - _pos.value
                val dist = delta.getDistance()
                val k = if (dist < captureRadius) dockGain else attractGain
                val c = if (dist < captureRadius) dockDamping else damping

                // PD-like accel
                var accel = delta * k - vel * c

                // Ambient friction
                if (ambientFriction > 0f && vel != Offset.Zero) {
                    val speed = vel.getDistance()
                    if (speed > 1e-3f) {
                        val friction = min(ambientFriction, speed / dt)
                        accel += (-vel / speed) * friction
                    }
                }

                // Clamp accel
                val aMag = accel.getDistance()
                if (aMag > maxAccel) accel *= (maxAccel / aMag)

                // Integrate velocity & clamp speed
                vel += accel * dt
                val speed = vel.getDistance()
                if (speed > maxSpeed) vel *= (maxSpeed / speed)

                // Integrate position
                _pos.snapTo(_pos.value + vel * dt)
            }
        }
    }
}

// --------------------- Demo Composable ---------------------

@Composable
fun SpatialRedirectableDemo() {
    val scope = rememberCoroutineScope()
    val controller = remember { SpatialController(scope) }

    // Example tuning
    LaunchedEffect(Unit) {
        controller.attractGain = 12f
        controller.damping = 2.6f
        controller.captureRadius = 36f
        controller.dockGain = 22f
        controller.dockDamping = 3.6f
        controller.maxAccel = 7000f
        controller.maxSpeed = 2000f
        controller.ambientFriction = 35f
        controller.redirectSmoothingHz = 7f
    }

    var target by remember { mutableStateOf(Offset(800f, 1200f)) }
    LaunchedEffect(target) { controller.setTarget(target); controller.start() }

    val visualSize = 56.dp
    val touchSize = 96.dp
    val vt = remember { VelocityTracker() }

    Box(Modifier.fillMaxSize().background(Color(0xFF0F1115))) {
        RetargetButtons { newTarget -> target = newTarget }

        // DRAG ONLY ON OBJECT (larger touch target)
        Box(
            Modifier
                .size(touchSize)
                .offset { IntOffset(controller.pos.x.roundToInt(), controller.pos.y.roundToInt()) }
                .pointerInput(Unit) {
                    detectDragGestures(
                        onDragStart = {
                            vt.resetTracking()
                            controller.interrupt()
                        },
                        onDrag = { change, drag ->
                            change.consume()
                            vt.addPosition(change.uptimeMillis, change.position)
                            controller.snapTo(controller.pos + drag)
                        },
                        onDragEnd = {
                            val v = vt.calculateVelocity()
                            controller.addImpulse(Offset(v.x, v.y))
                            controller.start()
                        },
                        onDragCancel = { controller.start() }
                    )
                },
            contentAlignment = Alignment.Center
        ) {
            Box(Modifier.size(visualSize).background(Color.White))
        }
    }
}

// Four corner tap zones for changing targets
@Composable
private fun RetargetButtons(onPick: (Offset) -> Unit) {
    BoxWithConstraints(Modifier.fillMaxSize()) {
        val wPx = constraints.maxWidth.toFloat()
        val hPx = constraints.maxHeight.toFloat()
        fun pad(alignment: Alignment, tx: Float, ty: Float) {
            Box(
                Modifier
                    .size(72.dp)
                    .align(alignment)
                    .background(Color(0x22FFFFFF))
                    .pointerInput(Unit) {
                        detectTapGestures { onPick(Offset(tx * wPx, ty * hPx)) }
                    }
            )
        }
        pad(Alignment.TopStart,    0.1f, 0.1f)
        pad(Alignment.TopEnd,      0.9f, 0.1f)
        pad(Alignment.BottomStart, 0.1f, 0.9f)
        pad(Alignment.BottomEnd,   0.9f, 0.9f)
    }
}

// --- math helpers ---
private operator fun Offset.plus(o: Offset) = Offset(x + o.x, y + o.y)
private operator fun Offset.minus(o: Offset) = Offset(x - o.x, y - o.y)
private operator fun Offset.times(s: Float) = Offset(x * s, y * s)
private operator fun Offset.div(s: Float) = Offset(x / s, y / s)