import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.spring
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.awaitFirstDown
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.size
import androidx.compose.runtime.Composable
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.AwaitPointerEventScope
import androidx.compose.ui.input.pointer.PointerEvent
import androidx.compose.ui.input.pointer.changedToDown
import androidx.compose.ui.input.pointer.consume
import androidx.compose.ui.input.pointer.forEachGesture
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.input.pointer.calculateZoom
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.launch
import kotlin.math.abs

@Composable
fun PinchZoomableBox(
    // scale‑per‑second threshold to trigger the spring
    fastVelocityThreshold: Float = 1.5f,
    // optional callback when a fast pinch occurs
    onFastPinch: (initialVelocity: Float) -> Unit = {}
) {
    val scope = rememberCoroutineScope()
    // Animatable holds the current scale of the box
    val scaleAnim = remember { Animatable(1f) }

    Box(
      Modifier
        .fillMaxSize()
        .background(Color.LightGray)
    ) {
      Box(
        Modifier
          .size(100.dp)
          .graphicsLayer(
            scaleX = scaleAnim.value,
            scaleY = scaleAnim.value
          )
          .pointerInput(Unit) {
            forEachGesture {
              awaitPointerEventScope {
                // 1) wait for two fingers
                awaitFirstDown()
                awaitSecondFinger()

                // timing & velocity tracking
                var lastTime = System.currentTimeMillis()
                var lastVelocity = 0f

                // real‑time pinch loop
                lateinit var event: PointerEvent
                do {
                  event = awaitPointerEvent()
                  val zoomDelta = event.calculateZoom()
                  val now = System.currentTimeMillis()
                  val dt = now - lastTime
                  if (dt > 0) {
                    // (zoomDelta - 1) per second
                    lastVelocity = (zoomDelta - 1f) / (dt / 1000f)
                  }
                  lastTime = now

                  // apply scale immediately
                  scope.launch { 
                    scaleAnim.snapTo(scaleAnim.value * zoomDelta) 
                  }

                  event.changes.forEach { it.consume() }
                } while (event.changes.count { it.pressed } >= 2)

                // 2) pinch ended → check velocity
                val initialVelocity = lastVelocity
                if (abs(initialVelocity) > fastVelocityThreshold) {
                  onFastPinch(initialVelocity)
                  // 3) spring from current scale back to 1f, using that velocity
                  scope.launch {
                    scaleAnim.animateTo(
                      targetValue = 1f,
                      animationSpec = spring(
                        dampingRatio = Spring.DampingRatioMediumBouncy,
                        stiffness = Spring.StiffnessMedium
                      ),
                      initialVelocity = initialVelocity
                    )
                  }
                }
              }
            }
          }
          .background(Color.Blue)
      )
    }
}

// helper: suspend until any second finger touches down
private suspend fun AwaitPointerEventScope.awaitSecondFinger() {
  while (true) {
    val ev = awaitPointerEvent()
    if (ev.changes.any { it.changedToDown() }) return
  }
}