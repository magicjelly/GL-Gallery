@RequiresApi(Build.VERSION_CODES.TIRAMISU)
@Composable
fun ShaderCanvasTemplate(
    imageList: List<ImageBitmap>,
    @RawRes shaderResId: Int,
    modifier: Modifier = Modifier,
    canvasWidthDp: Dp = 300.dp,
    canvasHeightDp: Dp = 300.dp
) {
    require(imageList.size >= 2) { "At least two images are required." }

    val context = LocalContext.current
    val density = LocalDensity.current

    val shaderCode = remember {
        context.resources.openRawResource(shaderResId).bufferedReader().use { it.readText() }
    }
    val runtimeShader = remember { RuntimeShader(shaderCode) }

    val time = remember { Animatable(0f) }

    val scope = rememberCoroutineScope()

    var currentIndex by remember { mutableIntStateOf(0) }
    var progress by remember { mutableFloatStateOf(0f) }
    var isAnimating by remember { mutableStateOf(false) }

    val canvasWidthPx = with(density) { canvasWidthDp.toPx() }
    val canvasHeightPx = with(density) { canvasHeightDp.toPx() }

    val imageCount = imageList.size
    val imageA = imageList[currentIndex % imageCount]
    val imageB = imageList[(currentIndex + 1) % imageCount]

    val scaledImageA = remember(imageA, canvasWidthPx, canvasHeightPx) {
        imageA.asAndroidBitmap().scaleToFit(canvasWidthPx.toInt(), canvasHeightPx.toInt()).asImageBitmap()
    }
    val scaledImageB = remember(imageB, canvasWidthPx, canvasHeightPx) {
        imageB.asAndroidBitmap().scaleToFit(canvasWidthPx.toInt(), canvasHeightPx.toInt()).asImageBitmap()
    }

    val progressX = progress * canvasWidthPx

    // Animate time
    LaunchedEffect(Unit) {
        while (true) {
            time.snapTo(time.value + 0.016f)
            delay(16)
        }
    }

    // Programmatic transition to next or previous
    fun transitionTo(offset: Int) {
        if (isAnimating) return
        isAnimating = true
        scope.launch {
            animate(
                initialValue = 0f,
                targetValue = 1f,
                animationSpec = tween(500, easing = FastOutSlowInEasing)
            ) { value, _ ->
                progress = value
            }
            currentIndex = (currentIndex + offset + imageCount) % imageCount
            progress = 0f
            isAnimating = false
        }
    }

    Box(
        modifier = modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Shader canvas
        Canvas(
            modifier = Modifier
                .size(canvasWidthDp, canvasHeightDp)
                .pointerInput(currentIndex, isAnimating) {
                    if (!isAnimating) {
                        detectHorizontalDragGestures(
                            onHorizontalDrag = { _, dragAmount ->
                                progress = (progress + dragAmount / canvasWidthPx).coerceIn(0f, 1f)
                            },
                            onDragEnd = {
                                if (progress >= 0.5f) {
                                    currentIndex = (currentIndex + 1) % imageCount
                                } else if (progress <= 0.5f && progress > 0f) {
                                    currentIndex = (currentIndex - 1 + imageCount) % imageCount
                                }
                                progress = 0f
                            },
                            onDragCancel = {
                                progress = 0f
                            }
                        )
                    }
                }
        ) {
            val shaderA = ImageShader(scaledImageA, TileMode.Clamp, TileMode.Clamp)
            val shaderB = ImageShader(scaledImageB, TileMode.Clamp, TileMode.Clamp)

            runtimeShader.setInputShader("iChannel0", shaderA)
            runtimeShader.setInputShader("iChannel1", shaderB)
            runtimeShader.setFloatUniform("iResolution", size.width, size.height)
            runtimeShader.setFloatUniform("iTime", time.value)
            runtimeShader.setFloatUniform("iMouseX", progressX.coerceIn(0f, size.width))
            runtimeShader.setFloatUniform("iMouseZ", 1f)

            drawRect(brush = ShaderBrush(runtimeShader))
        }

        // Control buttons
        Row(
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .padding(16.dp),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Button(onClick = { transitionTo(-1) }, enabled = !isAnimating) {
                Text("Previous")
            }
            Button(onClick = { transitionTo(+1) }, enabled = !isAnimating) {
                Text("Next")
            }
        }
    }
}